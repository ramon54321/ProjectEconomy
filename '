use economy::bank::*;
use femtovg::renderer::OpenGl;
use winit::{
    event_loop::{ControlFlow, EventLoop},
    window::{Window, WindowBuilder},
};

fn main() {
    let bank = FederalReserve::new("Washington");
    let account_a = bank.borrow_mut().open_account(bank.clone(), "Johnny");
    let account_b = bank.borrow_mut().open_account(bank.clone(), "Jill");

    bank.borrow_mut()
        .transfer(account_a.clone(), account_b.clone(), 500);

    println!("{:?}", account_a.borrow().bank.upgrade().unwrap().borrow());

    // Graphical Rendering
    let event_loop = EventLoop::new();

    let window_builder = WindowBuilder::new()
        .with_inner_size(winit::dpi::PhysicalSize::<f32>::new(1000., 600.))
        .with_title("femtovg demo");
    let windowed_context = ContextBuilder::new()
        .with_vsync(false)
        .build_windowed(window_builder, &event_loop)
        .unwrap();

    let context = OpenGl::new_from_glutin_context(windowed_context);
    //let renderer =

    //let (renderer, windowed_context) = { : OpenGl : ContextWrapper<PossiblyCurrent, …>
    //14         use glutin::ContextBuilder;
    //13
    //12         let wb = WindowBuilder::new() : WindowBuilder WindowBuilder
    //11             .with_inner_size(winit::dpi::PhysicalSize::<f32>::new(1000., 600.)) WindowBuilder width: he
    //10             .with_title("femtovg demo");
    //9
    //8         //let windowed_context = ContextBuilder::new().with_gl(GlRequest::Specific(Api::OpenGlEs, (2, 0     ))).with_vsync(false).build_windowed(wb, &el).unwrap();
    //7         //let windowed_context = ContextBuilder::new().with_vsync(false).with_multisampling(8).build_wi     ndowed(wb, &el).unwrap();
    //6         let windowed_context = ContextBuilder::new().with_vsync(false).build_windowed(wb, &el).unwrap()     ; : ContextWrapper<NotCurrent, …>
    //5         let windowed_context = unsafe { windowed_context.make_current().unwrap() }; : ContextWrapper<Po
    //4
    //3         let renderer = OpenGl::new_from_glutin_context(&windowed_context).expect("Cannot create rendere     r"); : OpenGl msg:
    //2
    //1         (renderer, windowed_context)
    //64       };

    event_loop.run(move |event, _, control_flow| {
        *control_flow = ControlFlow::Poll;
    });
}

//struct App {}
//impl App {
//pub fn new() -> Self {
//Self {}
//}
//}

//impl AppHandler for App {
//fn update(&mut self, update_args: AppUpdateArgs) {
//println!("Hello, world");
//}
//fn draw(&mut self, draw_args: AppDrawArgs) {}
//fn fatal_error(&mut self, error: &AppError) {
//println!("{:?}", error);
//}
//}
